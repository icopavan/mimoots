# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mimoots_swig', [dirname(__file__)])
        except ImportError:
            import _mimoots_swig
            return _mimoots_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_mimoots_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mimoots_swig = swig_import_helper()
    del swig_import_helper
else:
    import _mimoots_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _mimoots_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _mimoots_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _mimoots_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _mimoots_swig.high_res_timer_epoch()
class logcsv_cb(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fft_length, int used_tones) -> logcsv_cb_sptr

        Return a shared_ptr to a new instance of mimoots::logcsv_cb.

        To avoid accidental use of raw pointers, mimoots::logcsv_cb's constructor is in a private implementation class. mimoots::logcsv_cb::make is the public interface for creating new instances.

        Params: (fft_length, used_tones)
        """
        return _mimoots_swig.logcsv_cb_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _mimoots_swig.delete_logcsv_cb
    __del__ = lambda self : None;
logcsv_cb_swigregister = _mimoots_swig.logcsv_cb_swigregister
logcsv_cb_swigregister(logcsv_cb)

def logcsv_cb_make(*args, **kwargs):
  """
    logcsv_cb_make(int fft_length, int used_tones) -> logcsv_cb_sptr

    Return a shared_ptr to a new instance of mimoots::logcsv_cb.

    To avoid accidental use of raw pointers, mimoots::logcsv_cb's constructor is in a private implementation class. mimoots::logcsv_cb::make is the public interface for creating new instances.

    Params: (fft_length, used_tones)
    """
  return _mimoots_swig.logcsv_cb_make(*args, **kwargs)

class logcsv_cb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mimoots::logcsv_cb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::mimoots::logcsv_cb)> self) -> logcsv_cb_sptr
        __init__(boost::shared_ptr<(gr::mimoots::logcsv_cb)> self, logcsv_cb p) -> logcsv_cb_sptr
        """
        this = _mimoots_swig.new_logcsv_cb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(logcsv_cb_sptr self) -> logcsv_cb"""
        return _mimoots_swig.logcsv_cb_sptr___deref__(self)

    __swig_destroy__ = _mimoots_swig.delete_logcsv_cb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(logcsv_cb_sptr self, int fft_length, int used_tones) -> logcsv_cb_sptr

        Return a shared_ptr to a new instance of mimoots::logcsv_cb.

        To avoid accidental use of raw pointers, mimoots::logcsv_cb's constructor is in a private implementation class. mimoots::logcsv_cb::make is the public interface for creating new instances.

        Params: (fft_length, used_tones)
        """
        return _mimoots_swig.logcsv_cb_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(logcsv_cb_sptr self) -> unsigned int"""
        return _mimoots_swig.logcsv_cb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(logcsv_cb_sptr self, int which, int delay)
        declare_sample_delay(logcsv_cb_sptr self, unsigned int delay)
        """
        return _mimoots_swig.logcsv_cb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(logcsv_cb_sptr self, int which) -> unsigned int"""
        return _mimoots_swig.logcsv_cb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(logcsv_cb_sptr self) -> int"""
        return _mimoots_swig.logcsv_cb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(logcsv_cb_sptr self) -> double"""
        return _mimoots_swig.logcsv_cb_sptr_relative_rate(self)

    def start(self):
        """start(logcsv_cb_sptr self) -> bool"""
        return _mimoots_swig.logcsv_cb_sptr_start(self)

    def stop(self):
        """stop(logcsv_cb_sptr self) -> bool"""
        return _mimoots_swig.logcsv_cb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(logcsv_cb_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimoots_swig.logcsv_cb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(logcsv_cb_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimoots_swig.logcsv_cb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(logcsv_cb_sptr self) -> int"""
        return _mimoots_swig.logcsv_cb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(logcsv_cb_sptr self, int m)"""
        return _mimoots_swig.logcsv_cb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(logcsv_cb_sptr self)"""
        return _mimoots_swig.logcsv_cb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(logcsv_cb_sptr self) -> bool"""
        return _mimoots_swig.logcsv_cb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(logcsv_cb_sptr self, int m)"""
        return _mimoots_swig.logcsv_cb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(logcsv_cb_sptr self) -> int"""
        return _mimoots_swig.logcsv_cb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(logcsv_cb_sptr self, int i) -> long"""
        return _mimoots_swig.logcsv_cb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(logcsv_cb_sptr self, long max_output_buffer)
        set_max_output_buffer(logcsv_cb_sptr self, int port, long max_output_buffer)
        """
        return _mimoots_swig.logcsv_cb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(logcsv_cb_sptr self, int i) -> long"""
        return _mimoots_swig.logcsv_cb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(logcsv_cb_sptr self, long min_output_buffer)
        set_min_output_buffer(logcsv_cb_sptr self, int port, long min_output_buffer)
        """
        return _mimoots_swig.logcsv_cb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(logcsv_cb_sptr self) -> float"""
        return _mimoots_swig.logcsv_cb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(logcsv_cb_sptr self) -> float"""
        return _mimoots_swig.logcsv_cb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(logcsv_cb_sptr self) -> float"""
        return _mimoots_swig.logcsv_cb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(logcsv_cb_sptr self) -> float"""
        return _mimoots_swig.logcsv_cb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(logcsv_cb_sptr self) -> float"""
        return _mimoots_swig.logcsv_cb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(logcsv_cb_sptr self) -> float"""
        return _mimoots_swig.logcsv_cb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(logcsv_cb_sptr self, int which) -> float
        pc_input_buffers_full(logcsv_cb_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.logcsv_cb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(logcsv_cb_sptr self, int which) -> float
        pc_input_buffers_full_avg(logcsv_cb_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.logcsv_cb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(logcsv_cb_sptr self, int which) -> float
        pc_input_buffers_full_var(logcsv_cb_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.logcsv_cb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(logcsv_cb_sptr self, int which) -> float
        pc_output_buffers_full(logcsv_cb_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.logcsv_cb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(logcsv_cb_sptr self, int which) -> float
        pc_output_buffers_full_avg(logcsv_cb_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.logcsv_cb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(logcsv_cb_sptr self, int which) -> float
        pc_output_buffers_full_var(logcsv_cb_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.logcsv_cb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(logcsv_cb_sptr self) -> float"""
        return _mimoots_swig.logcsv_cb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(logcsv_cb_sptr self) -> float"""
        return _mimoots_swig.logcsv_cb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(logcsv_cb_sptr self) -> float"""
        return _mimoots_swig.logcsv_cb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(logcsv_cb_sptr self) -> float"""
        return _mimoots_swig.logcsv_cb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(logcsv_cb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimoots_swig.logcsv_cb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(logcsv_cb_sptr self)"""
        return _mimoots_swig.logcsv_cb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(logcsv_cb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimoots_swig.logcsv_cb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(logcsv_cb_sptr self) -> int"""
        return _mimoots_swig.logcsv_cb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(logcsv_cb_sptr self) -> int"""
        return _mimoots_swig.logcsv_cb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(logcsv_cb_sptr self, int priority) -> int"""
        return _mimoots_swig.logcsv_cb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(logcsv_cb_sptr self) -> std::string"""
        return _mimoots_swig.logcsv_cb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(logcsv_cb_sptr self) -> std::string"""
        return _mimoots_swig.logcsv_cb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(logcsv_cb_sptr self) -> io_signature_sptr"""
        return _mimoots_swig.logcsv_cb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(logcsv_cb_sptr self) -> io_signature_sptr"""
        return _mimoots_swig.logcsv_cb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(logcsv_cb_sptr self) -> long"""
        return _mimoots_swig.logcsv_cb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(logcsv_cb_sptr self) -> basic_block_sptr"""
        return _mimoots_swig.logcsv_cb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(logcsv_cb_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimoots_swig.logcsv_cb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(logcsv_cb_sptr self) -> std::string"""
        return _mimoots_swig.logcsv_cb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(logcsv_cb_sptr self, std::string name)"""
        return _mimoots_swig.logcsv_cb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(logcsv_cb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mimoots_swig.logcsv_cb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(logcsv_cb_sptr self) -> swig_int_ptr"""
        return _mimoots_swig.logcsv_cb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(logcsv_cb_sptr self) -> swig_int_ptr"""
        return _mimoots_swig.logcsv_cb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(logcsv_cb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mimoots_swig.logcsv_cb_sptr_message_subscribers(self, *args, **kwargs)

logcsv_cb_sptr_swigregister = _mimoots_swig.logcsv_cb_sptr_swigregister
logcsv_cb_sptr_swigregister(logcsv_cb_sptr)

logcsv_cb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
logcsv_cb = logcsv_cb.make;

class ofdm_extract_frame_cvc(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t fft_len, size_t cp_len, size_t nsymbols_per_ofdmframe, bool info=False) -> ofdm_extract_frame_cvc_sptr

        Return a shared_ptr to a new instance of mimoots::ofdm_extract_frame_cvc.

        To avoid accidental use of raw pointers, mimoots::ofdm_extract_frame_cvc's constructor is in a private implementation class. mimoots::ofdm_extract_frame_cvc::make is the public interface for creating new instances.

        Params: (fft_len, cp_len, nsymbols_per_ofdmframe, info)
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_make(*args, **kwargs)

    make = staticmethod(make)
    def fft_len(self):
        """
        fft_len(ofdm_extract_frame_cvc self) -> size_t

        Params: (NONE)
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_fft_len(self)

    def cp_len(self):
        """
        cp_len(ofdm_extract_frame_cvc self) -> size_t

        Params: (NONE)
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_cp_len(self)

    def nsymbols_per_ofdmframe(self):
        """
        nsymbols_per_ofdmframe(ofdm_extract_frame_cvc self) -> size_t

        Params: (NONE)
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_nsymbols_per_ofdmframe(self)

    def info(self):
        """
        info(ofdm_extract_frame_cvc self) -> bool

        Params: (NONE)
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_info(self)

    def set_fft_len(self, *args, **kwargs):
        """
        set_fft_len(ofdm_extract_frame_cvc self, size_t arg2)

        Params: ()
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_set_fft_len(self, *args, **kwargs)

    def set_cp_len(self, *args, **kwargs):
        """
        set_cp_len(ofdm_extract_frame_cvc self, size_t arg2)

        Params: ()
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_set_cp_len(self, *args, **kwargs)

    def set_nsymbols_per_ofdmframe(self, *args, **kwargs):
        """
        set_nsymbols_per_ofdmframe(ofdm_extract_frame_cvc self, size_t arg2)

        Params: ()
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_set_nsymbols_per_ofdmframe(self, *args, **kwargs)

    def set_info(self, *args, **kwargs):
        """
        set_info(ofdm_extract_frame_cvc self, bool arg2)

        Params: ()
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_set_info(self, *args, **kwargs)

    __swig_destroy__ = _mimoots_swig.delete_ofdm_extract_frame_cvc
    __del__ = lambda self : None;
ofdm_extract_frame_cvc_swigregister = _mimoots_swig.ofdm_extract_frame_cvc_swigregister
ofdm_extract_frame_cvc_swigregister(ofdm_extract_frame_cvc)

def ofdm_extract_frame_cvc_make(*args, **kwargs):
  """
    ofdm_extract_frame_cvc_make(size_t fft_len, size_t cp_len, size_t nsymbols_per_ofdmframe, bool info=False) -> ofdm_extract_frame_cvc_sptr

    Return a shared_ptr to a new instance of mimoots::ofdm_extract_frame_cvc.

    To avoid accidental use of raw pointers, mimoots::ofdm_extract_frame_cvc's constructor is in a private implementation class. mimoots::ofdm_extract_frame_cvc::make is the public interface for creating new instances.

    Params: (fft_len, cp_len, nsymbols_per_ofdmframe, info)
    """
  return _mimoots_swig.ofdm_extract_frame_cvc_make(*args, **kwargs)

class ofdm_extract_frame_cvc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mimoots::ofdm_extract_frame_cvc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::mimoots::ofdm_extract_frame_cvc)> self) -> ofdm_extract_frame_cvc_sptr
        __init__(boost::shared_ptr<(gr::mimoots::ofdm_extract_frame_cvc)> self, ofdm_extract_frame_cvc p) -> ofdm_extract_frame_cvc_sptr
        """
        this = _mimoots_swig.new_ofdm_extract_frame_cvc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(ofdm_extract_frame_cvc_sptr self) -> ofdm_extract_frame_cvc"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr___deref__(self)

    __swig_destroy__ = _mimoots_swig.delete_ofdm_extract_frame_cvc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(ofdm_extract_frame_cvc_sptr self, size_t fft_len, size_t cp_len, size_t nsymbols_per_ofdmframe, bool info=False) -> ofdm_extract_frame_cvc_sptr

        Return a shared_ptr to a new instance of mimoots::ofdm_extract_frame_cvc.

        To avoid accidental use of raw pointers, mimoots::ofdm_extract_frame_cvc's constructor is in a private implementation class. mimoots::ofdm_extract_frame_cvc::make is the public interface for creating new instances.

        Params: (fft_len, cp_len, nsymbols_per_ofdmframe, info)
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_make(self, *args, **kwargs)

    def fft_len(self):
        """
        fft_len(ofdm_extract_frame_cvc_sptr self) -> size_t

        Params: (NONE)
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_fft_len(self)

    def cp_len(self):
        """
        cp_len(ofdm_extract_frame_cvc_sptr self) -> size_t

        Params: (NONE)
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_cp_len(self)

    def nsymbols_per_ofdmframe(self):
        """
        nsymbols_per_ofdmframe(ofdm_extract_frame_cvc_sptr self) -> size_t

        Params: (NONE)
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_nsymbols_per_ofdmframe(self)

    def info(self):
        """
        info(ofdm_extract_frame_cvc_sptr self) -> bool

        Params: (NONE)
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_info(self)

    def set_fft_len(self, *args, **kwargs):
        """
        set_fft_len(ofdm_extract_frame_cvc_sptr self, size_t arg2)

        Params: ()
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_set_fft_len(self, *args, **kwargs)

    def set_cp_len(self, *args, **kwargs):
        """
        set_cp_len(ofdm_extract_frame_cvc_sptr self, size_t arg2)

        Params: ()
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_set_cp_len(self, *args, **kwargs)

    def set_nsymbols_per_ofdmframe(self, *args, **kwargs):
        """
        set_nsymbols_per_ofdmframe(ofdm_extract_frame_cvc_sptr self, size_t arg2)

        Params: ()
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_set_nsymbols_per_ofdmframe(self, *args, **kwargs)

    def set_info(self, *args, **kwargs):
        """
        set_info(ofdm_extract_frame_cvc_sptr self, bool arg2)

        Params: ()
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_set_info(self, *args, **kwargs)

    def history(self):
        """history(ofdm_extract_frame_cvc_sptr self) -> unsigned int"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ofdm_extract_frame_cvc_sptr self, int which, int delay)
        declare_sample_delay(ofdm_extract_frame_cvc_sptr self, unsigned int delay)
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(ofdm_extract_frame_cvc_sptr self, int which) -> unsigned int"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(ofdm_extract_frame_cvc_sptr self) -> int"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(ofdm_extract_frame_cvc_sptr self) -> double"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_relative_rate(self)

    def start(self):
        """start(ofdm_extract_frame_cvc_sptr self) -> bool"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_start(self)

    def stop(self):
        """stop(ofdm_extract_frame_cvc_sptr self) -> bool"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(ofdm_extract_frame_cvc_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(ofdm_extract_frame_cvc_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(ofdm_extract_frame_cvc_sptr self) -> int"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(ofdm_extract_frame_cvc_sptr self, int m)"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ofdm_extract_frame_cvc_sptr self)"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ofdm_extract_frame_cvc_sptr self) -> bool"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(ofdm_extract_frame_cvc_sptr self, int m)"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(ofdm_extract_frame_cvc_sptr self) -> int"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(ofdm_extract_frame_cvc_sptr self, int i) -> long"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ofdm_extract_frame_cvc_sptr self, long max_output_buffer)
        set_max_output_buffer(ofdm_extract_frame_cvc_sptr self, int port, long max_output_buffer)
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(ofdm_extract_frame_cvc_sptr self, int i) -> long"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ofdm_extract_frame_cvc_sptr self, long min_output_buffer)
        set_min_output_buffer(ofdm_extract_frame_cvc_sptr self, int port, long min_output_buffer)
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(ofdm_extract_frame_cvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ofdm_extract_frame_cvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ofdm_extract_frame_cvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(ofdm_extract_frame_cvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ofdm_extract_frame_cvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(ofdm_extract_frame_cvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ofdm_extract_frame_cvc_sptr self, int which) -> float
        pc_input_buffers_full(ofdm_extract_frame_cvc_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ofdm_extract_frame_cvc_sptr self, int which) -> float
        pc_input_buffers_full_avg(ofdm_extract_frame_cvc_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ofdm_extract_frame_cvc_sptr self, int which) -> float
        pc_input_buffers_full_var(ofdm_extract_frame_cvc_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ofdm_extract_frame_cvc_sptr self, int which) -> float
        pc_output_buffers_full(ofdm_extract_frame_cvc_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ofdm_extract_frame_cvc_sptr self, int which) -> float
        pc_output_buffers_full_avg(ofdm_extract_frame_cvc_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ofdm_extract_frame_cvc_sptr self, int which) -> float
        pc_output_buffers_full_var(ofdm_extract_frame_cvc_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(ofdm_extract_frame_cvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(ofdm_extract_frame_cvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(ofdm_extract_frame_cvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(ofdm_extract_frame_cvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(ofdm_extract_frame_cvc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(ofdm_extract_frame_cvc_sptr self)"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(ofdm_extract_frame_cvc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(ofdm_extract_frame_cvc_sptr self) -> int"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(ofdm_extract_frame_cvc_sptr self) -> int"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(ofdm_extract_frame_cvc_sptr self, int priority) -> int"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(ofdm_extract_frame_cvc_sptr self) -> std::string"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(ofdm_extract_frame_cvc_sptr self) -> std::string"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(ofdm_extract_frame_cvc_sptr self) -> io_signature_sptr"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(ofdm_extract_frame_cvc_sptr self) -> io_signature_sptr"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(ofdm_extract_frame_cvc_sptr self) -> long"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(ofdm_extract_frame_cvc_sptr self) -> basic_block_sptr"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(ofdm_extract_frame_cvc_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(ofdm_extract_frame_cvc_sptr self) -> std::string"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(ofdm_extract_frame_cvc_sptr self, std::string name)"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(ofdm_extract_frame_cvc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(ofdm_extract_frame_cvc_sptr self) -> swig_int_ptr"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(ofdm_extract_frame_cvc_sptr self) -> swig_int_ptr"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(ofdm_extract_frame_cvc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mimoots_swig.ofdm_extract_frame_cvc_sptr_message_subscribers(self, *args, **kwargs)

ofdm_extract_frame_cvc_sptr_swigregister = _mimoots_swig.ofdm_extract_frame_cvc_sptr_swigregister
ofdm_extract_frame_cvc_sptr_swigregister(ofdm_extract_frame_cvc_sptr)

ofdm_extract_frame_cvc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ofdm_extract_frame_cvc = ofdm_extract_frame_cvc.make;

class ofdm_scale_symbol_vcvc(object):
    """
    Takes an OFDM-Symbol and divides every value by the maximum value in this OFDM-Symbol that every value has an absolute smaller or equal than 1.

    The input is a vector with the size of fft_len. It should be an OFDM-Symbol. To keep every absolute value of all complex values lower or equal than 1, the block searches for the value with the largest absolute and devides every value by it. It is possible to scale all normalized values with a parameter called scale. The output is a normalized vector with the length of fft_len.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t symbol_len, float scale=1) -> ofdm_scale_symbol_vcvc_sptr

        Return a shared_ptr to a new instance of mimoots::ofdm_scale_symbol_vcvc.

        To avoid accidental use of raw pointers, mimoots::ofdm_scale_symbol_vcvc's constructor is in a private implementation class. mimoots::ofdm_scale_symbol_vcvc::make is the public interface for creating new instances.

        Params: (symbol_len, scale)
        """
        return _mimoots_swig.ofdm_scale_symbol_vcvc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _mimoots_swig.delete_ofdm_scale_symbol_vcvc
    __del__ = lambda self : None;
ofdm_scale_symbol_vcvc_swigregister = _mimoots_swig.ofdm_scale_symbol_vcvc_swigregister
ofdm_scale_symbol_vcvc_swigregister(ofdm_scale_symbol_vcvc)

def ofdm_scale_symbol_vcvc_make(*args, **kwargs):
  """
    ofdm_scale_symbol_vcvc_make(size_t symbol_len, float scale=1) -> ofdm_scale_symbol_vcvc_sptr

    Return a shared_ptr to a new instance of mimoots::ofdm_scale_symbol_vcvc.

    To avoid accidental use of raw pointers, mimoots::ofdm_scale_symbol_vcvc's constructor is in a private implementation class. mimoots::ofdm_scale_symbol_vcvc::make is the public interface for creating new instances.

    Params: (symbol_len, scale)
    """
  return _mimoots_swig.ofdm_scale_symbol_vcvc_make(*args, **kwargs)

class ofdm_scale_symbol_vcvc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mimoots::ofdm_scale_symbol_vcvc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::mimoots::ofdm_scale_symbol_vcvc)> self) -> ofdm_scale_symbol_vcvc_sptr
        __init__(boost::shared_ptr<(gr::mimoots::ofdm_scale_symbol_vcvc)> self, ofdm_scale_symbol_vcvc p) -> ofdm_scale_symbol_vcvc_sptr
        """
        this = _mimoots_swig.new_ofdm_scale_symbol_vcvc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(ofdm_scale_symbol_vcvc_sptr self) -> ofdm_scale_symbol_vcvc"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr___deref__(self)

    __swig_destroy__ = _mimoots_swig.delete_ofdm_scale_symbol_vcvc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(ofdm_scale_symbol_vcvc_sptr self, size_t symbol_len, float scale=1) -> ofdm_scale_symbol_vcvc_sptr

        Return a shared_ptr to a new instance of mimoots::ofdm_scale_symbol_vcvc.

        To avoid accidental use of raw pointers, mimoots::ofdm_scale_symbol_vcvc's constructor is in a private implementation class. mimoots::ofdm_scale_symbol_vcvc::make is the public interface for creating new instances.

        Params: (symbol_len, scale)
        """
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(ofdm_scale_symbol_vcvc_sptr self) -> unsigned int"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ofdm_scale_symbol_vcvc_sptr self, int which, int delay)
        declare_sample_delay(ofdm_scale_symbol_vcvc_sptr self, unsigned int delay)
        """
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(ofdm_scale_symbol_vcvc_sptr self, int which) -> unsigned int"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(ofdm_scale_symbol_vcvc_sptr self) -> int"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(ofdm_scale_symbol_vcvc_sptr self) -> double"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_relative_rate(self)

    def start(self):
        """start(ofdm_scale_symbol_vcvc_sptr self) -> bool"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_start(self)

    def stop(self):
        """stop(ofdm_scale_symbol_vcvc_sptr self) -> bool"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(ofdm_scale_symbol_vcvc_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(ofdm_scale_symbol_vcvc_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(ofdm_scale_symbol_vcvc_sptr self) -> int"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(ofdm_scale_symbol_vcvc_sptr self, int m)"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ofdm_scale_symbol_vcvc_sptr self)"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ofdm_scale_symbol_vcvc_sptr self) -> bool"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(ofdm_scale_symbol_vcvc_sptr self, int m)"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(ofdm_scale_symbol_vcvc_sptr self) -> int"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(ofdm_scale_symbol_vcvc_sptr self, int i) -> long"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ofdm_scale_symbol_vcvc_sptr self, long max_output_buffer)
        set_max_output_buffer(ofdm_scale_symbol_vcvc_sptr self, int port, long max_output_buffer)
        """
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(ofdm_scale_symbol_vcvc_sptr self, int i) -> long"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ofdm_scale_symbol_vcvc_sptr self, long min_output_buffer)
        set_min_output_buffer(ofdm_scale_symbol_vcvc_sptr self, int port, long min_output_buffer)
        """
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(ofdm_scale_symbol_vcvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ofdm_scale_symbol_vcvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ofdm_scale_symbol_vcvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(ofdm_scale_symbol_vcvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ofdm_scale_symbol_vcvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(ofdm_scale_symbol_vcvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ofdm_scale_symbol_vcvc_sptr self, int which) -> float
        pc_input_buffers_full(ofdm_scale_symbol_vcvc_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ofdm_scale_symbol_vcvc_sptr self, int which) -> float
        pc_input_buffers_full_avg(ofdm_scale_symbol_vcvc_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ofdm_scale_symbol_vcvc_sptr self, int which) -> float
        pc_input_buffers_full_var(ofdm_scale_symbol_vcvc_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ofdm_scale_symbol_vcvc_sptr self, int which) -> float
        pc_output_buffers_full(ofdm_scale_symbol_vcvc_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ofdm_scale_symbol_vcvc_sptr self, int which) -> float
        pc_output_buffers_full_avg(ofdm_scale_symbol_vcvc_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ofdm_scale_symbol_vcvc_sptr self, int which) -> float
        pc_output_buffers_full_var(ofdm_scale_symbol_vcvc_sptr self) -> pmt_vector_float
        """
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(ofdm_scale_symbol_vcvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(ofdm_scale_symbol_vcvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(ofdm_scale_symbol_vcvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(ofdm_scale_symbol_vcvc_sptr self) -> float"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(ofdm_scale_symbol_vcvc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(ofdm_scale_symbol_vcvc_sptr self)"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(ofdm_scale_symbol_vcvc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(ofdm_scale_symbol_vcvc_sptr self) -> int"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(ofdm_scale_symbol_vcvc_sptr self) -> int"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(ofdm_scale_symbol_vcvc_sptr self, int priority) -> int"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(ofdm_scale_symbol_vcvc_sptr self) -> std::string"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(ofdm_scale_symbol_vcvc_sptr self) -> std::string"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(ofdm_scale_symbol_vcvc_sptr self) -> io_signature_sptr"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(ofdm_scale_symbol_vcvc_sptr self) -> io_signature_sptr"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(ofdm_scale_symbol_vcvc_sptr self) -> long"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(ofdm_scale_symbol_vcvc_sptr self) -> basic_block_sptr"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(ofdm_scale_symbol_vcvc_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(ofdm_scale_symbol_vcvc_sptr self) -> std::string"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(ofdm_scale_symbol_vcvc_sptr self, std::string name)"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(ofdm_scale_symbol_vcvc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(ofdm_scale_symbol_vcvc_sptr self) -> swig_int_ptr"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(ofdm_scale_symbol_vcvc_sptr self) -> swig_int_ptr"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(ofdm_scale_symbol_vcvc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_message_subscribers(self, *args, **kwargs)

ofdm_scale_symbol_vcvc_sptr_swigregister = _mimoots_swig.ofdm_scale_symbol_vcvc_sptr_swigregister
ofdm_scale_symbol_vcvc_sptr_swigregister(ofdm_scale_symbol_vcvc_sptr)

ofdm_scale_symbol_vcvc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ofdm_scale_symbol_vcvc = ofdm_scale_symbol_vcvc.make;



